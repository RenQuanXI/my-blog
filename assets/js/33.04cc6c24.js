(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{447:function(t,a,s){"use strict";s.r(a);var n=s(12),v=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"js基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js基础语法"}},[t._v("#")]),t._v(" JS基础语法")]),t._v(" "),s("h3",{attrs:{id:"_1-组成部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-组成部分"}},[t._v("#")]),t._v(" 1.组成部分")]),t._v(" "),s("p",[t._v("1.ECMAScript 核心语法")]),t._v(" "),s("p",[t._v("2.DOM文档对象模型（操作文档的一套API）")]),t._v(" "),s("p",[t._v("3.BOM浏览器对象模型(操作浏览器的一套API)")]),t._v(" "),s("h3",{attrs:{id:"_2-基本书写方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本书写方式"}},[t._v("#")]),t._v(" 2.基本书写方式")]),t._v(" "),s("p",[t._v("1.行内嵌套")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v(" eg："),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onclick")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("alert("),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("hello js"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v(")"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("按钮"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("2.内部书写")]),t._v(" "),s("p",[t._v("加上类名"),s("code",[t._v("<script><\/script>")]),t._v("即可，可以写在head内，也可以写在body中 ，一般写在body最下面")]),t._v(" "),s("p",[t._v("3.外链JS文件")]),t._v(" "),s("p",[s("code",[t._v('<sprect scr=""><\/script>')])]),t._v(" "),s("h3",{attrs:{id:"_3-输出方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-输出方式"}},[t._v("#")]),t._v(" 3.输出方式")]),t._v(" "),s("p",[t._v("1.alert  弹出警告框            \t\t\t      \t\t     alert ('hellow')")]),t._v(" "),s("p",[t._v("2.console.log 在控制台显示                                                  console.log('hellow')")]),t._v(" "),s("p",[t._v("3.document.write 在网页中直接显示可以添加任何标签        document.write('hellow')  \t\tdocument.write("),s("code",[t._v("<h1>hellow</h1>")]),t._v(")")]),t._v(" "),s("p",[t._v("4.prompt   弹出输入框  （接收收集用户输入内容）             prompt('请输入密码')")]),t._v(" "),s("p",[t._v("5.confirm（）   弹出删除警告框                        confirm（'您确定要删除本项吗？'）")]),t._v(" "),s("h3",{attrs:{id:"_4-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-变量"}},[t._v("#")]),t._v(" 4.变量")]),t._v(" "),s("p",[t._v("变量就是向内存所申请的一块空间，并且该空间在内存中是有地址的。")]),t._v(" "),s("p",[t._v("基本语法：var  变量名 = 数据  ；  eg：  var  number  =  1")]),t._v(" "),s("p",[t._v("变量名：通过变量名可以操作空间中的数据（获取和修改）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E5%8F%98%E9%87%8F%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%BB%86%E8%8A%82%E9%97%AE%E9%A2%98.png",alt:""}}),t._v(")")]),t._v(" "),s("p",[t._v("实现两个变量赋值的交换")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E5%AE%9E%E7%8E%B0%E5%B0%86%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E5%80%BC%E7%9A%84%E4%BA%A4%E6%8D%A2.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_5-数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据类型"}},[t._v("#")]),t._v(" 5.数据类型")]),t._v(" "),s("ol",[s("li",[t._v("数字类型 number                          纯数字的")]),t._v(" "),s("li",[t._v("字符串    string                              变量里面加了单引号或者双引号的（字符串拼接+）")]),t._v(" "),s("li",[t._v("布尔型    boolean                          布尔型只有两个值 true  或者false")]),t._v(" "),s("li",[t._v("未定义类型   undefined                 所有未赋值的变量都是默认undefined")]),t._v(" "),s("li",[t._v("NULL型                                         只有一个默认值object（空对象）")])]),t._v(" "),s("h4",{attrs:{id:"检测数据类型的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检测数据类型的方法"}},[t._v("#")]),t._v(" 检测数据类型的方法")]),t._v(" "),s("ul",[s("li",[t._v("typeof　　用来检测数据类型的运算符")]),t._v(" "),s("li",[t._v("instanceof 　　 检测一个实例是否属于某个类    ")]),t._v(" "),s("li",[t._v("constructor　　 构造函数")]),t._v(" "),s("li",[t._v("Object.prototype.toString.call()　　原型链上的Object对象的toString方法")]),t._v(" "),s("li",[t._v("Array.isArraay（要检测的元素）返回布尔值")])]),t._v(" "),s("h3",{attrs:{id:"_6-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-运算符"}},[t._v("#")]),t._v(" 6.运算符")]),t._v(" "),s("ol",[s("li",[t._v("算数运算符  +  -  *  /  %   *(%是运算余数的   eg：       console.log(3%2)    输出值为1   )")]),t._v(" "),s("li",[t._v("赋值运算符 "),s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6.png",alt:""}})]),t._v(" "),s("li",[t._v("比较运算符"),s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.png",alt:""}})])]),t._v(" "),s("h3",{attrs:{id:"_7-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-运算符"}},[t._v("#")]),t._v(" 7. 运算符")]),t._v(" "),s("p",[t._v("&&逻辑与     （且运算）")]),t._v(" "),s("p",[t._v("||逻辑或       （或运算）")]),t._v(" "),s("p",[t._v("！逻辑非         （取反）")]),t._v(" "),s("p",[t._v("作用运算布尔值 ，可以将多个条件组合在一起运算")]),t._v(" "),s("p",[t._v("2.一元运算符")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("前置自增")]),t._v(" "),s("p",[t._v("语法++变量")]),t._v(" "),s("p",[t._v("特点：变量自身先加一再把结果返回到表达式中运算")])]),t._v(" "),s("li",[s("p",[t._v("后置自增")]),t._v(" "),s("p",[t._v("语法  变量++")]),t._v(" "),s("p",[t._v("特点  先返回结果到表达式中，变量再自身+1")])]),t._v(" "),s("li",[s("p",[t._v("前置自减")])]),t._v(" "),s("li",[s("p",[t._v("后置自减")])])]),t._v(" "),s("h3",{attrs:{id:"_8-数据转换类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-数据转换类"}},[t._v("#")]),t._v(" 8.数据转换类")]),t._v(" "),s("ol",[s("li",[s("h5",{attrs:{id:"强制转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制转换"}},[t._v("#")]),t._v(" 强制转换")]),t._v(" "),s("p",[s("strong",[t._v("转字符串")])]),t._v(" "),s("p",[t._v("​\t变量.tostring（）；")]),t._v(" "),s("p",[t._v("​\tstring（需要转换的变量名）；{常用}")]),t._v(" "),s("p",[s("strong",[t._v("转数字")])]),t._v(" "),s("p",[t._v("​\tNumber（需转换的变量名）；   NaN 全称：Not  a  Number")]),t._v(" "),s("p",[t._v("​\tparselnt（需转换的变量名）转换成整数  100px；")]),t._v(" "),s("p",[t._v("​\tparseFlaot（需转换的变量名）转换成小数 ；")]),t._v(" "),s("p",[t._v("*")]),t._v(" "),s("p",[s("strong",[t._v("转布尔")])]),t._v(" "),s("p",[t._v("​\t''空字符串'，undefined，null，0转换为布尔值始终都是false，其他转换为布尔值都是true")]),t._v(" "),s("p",[t._v("转换方式为")]),t._v(" "),s("p",[t._v("​\tBoolean（其他数据）")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"隐式转换-自动转换-在做加减运算时才会发生隐式转换-其他情况比较的时候都需要进行强制转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换-自动转换-在做加减运算时才会发生隐式转换-其他情况比较的时候都需要进行强制转换"}},[t._v("#")]),t._v(" 隐式转换，自动转换（在做加减运算时才会发生隐式转换，其他情况比较的时候都需要进行强制转换）")]),t._v(" "),s("p",[s("strong",[t._v("转字符串")])]),t._v(" "),s("p",[t._v("​\t任何数据和字符串相加都会自动转换为string类型")]),t._v(" "),s("p",[s("strong",[t._v("转数字")])]),t._v(" "),s("p",[t._v("​\t任何数据在做算数运算时（除了字符串相加时）或任何数据在和数字比较是，其他数据都会自动转化为\tNumberi类型。")]),t._v(" "),s("p",[t._v("​\t任何数据在和NaN做算数运算时除了和字符串相加外，其结果始终都是NaN")]),t._v(" "),s("p",[t._v("​\t任何数据在做运算时只要不是纯数字的，其转化结果必是NaN，其运算结果也是NaN")]),t._v(" "),s("p",[s("strong",[t._v("转布尔")])]),t._v(" "),s("p",[t._v("​\t在取反运算时其他数据会自动转换成布尔值")]),t._v(" "),s("p",[t._v("​\t在分支节后或循环结构的条件判断中，其他数据会自动转换成布尔值")]),t._v(" "),s("h3",{attrs:{id:"_9-循环结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-循环结构"}},[t._v("#")]),t._v(" 9.循环结构")]),t._v(" "),s("h3",{attrs:{id:"switch结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch结构"}},[t._v("#")]),t._v(" switch结构")]),t._v(" "),s("p",[t._v("语法：switch（传入的值） {")]),t._v(" "),s("p",[t._v("​\t\tcase 值一：")]),t._v(" "),s("p",[t._v("​\t\t\t//执行语句")]),t._v(" "),s("p",[t._v("​\t\t\tbreak；")]),t._v(" "),s("p",[t._v("​\t\tcase 值二：")]),t._v(" "),s("p",[t._v("​\t\t\t//执行语句")]),t._v(" "),s("p",[t._v("​\t\t\tberak；")]),t._v(" "),s("p",[t._v("​\t\tcase 值三：")]),t._v(" "),s("p",[t._v("​\t\t\t//执行语句")]),t._v(" "),s("p",[t._v("​\t\t\tberak；")]),t._v(" "),s("p",[t._v("​\t\tdefault：")]),t._v(" "),s("p",[t._v("​\t\t\t//执行语句")]),t._v(" "),s("p",[t._v("​\t\t\tbreak；")]),t._v(" "),s("p",[t._v("}")]),t._v(" "),s("p",[t._v("做的是全等判断  然传入的值和下列各种值的情况做比较，符合的则执行代码负责继续向下执行，如果都不符合则执行defaultdu（可有可无，按需使用）对应的代码")])])]),t._v(" "),s("p",[t._v("流程控制-循环结构")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("while循环")]),t._v(" "),s("p",[t._v("​\t\teg：  var   a  =  1；")]),t._v(" "),s("p",[t._v("​\t\t\twhile （a<=1000）{documend.write ('")]),s("h2",[t._v(" 我爱你")]),t._v("') ;   a++}"),s("p"),t._v(" "),s("p",[t._v("​\t\t\t")]),t._v(" "),s("p",[t._v("​\t当循环条件成立时会执行循环体中的代码，然后在返回判断条件是否成立，周而复始，直到条件不成立是结束当前的循环")]),t._v(" "),s("p",[t._v("​")])]),t._v(" "),s("li",[s("p",[t._v("do-while循环")]),t._v(" "),s("p",[t._v("​\t\teg ：  do {documend.write('")]),s("h2",[t._v(" 我爱你")]),t._v("') ; a++}  while(a<=1000)"),s("p"),t._v(" "),s("p",[t._v("​\t\t")]),t._v(" "),s("p",[t._v("​\t先执行一次循环体，然后是否周而复始的执行循环体，根据while内的条件决定；")])]),t._v(" "),s("li",[s("p",[t._v("for循环 （最常用）**")]),t._v(" "),s("p",[t._v("for （var a = 1；a<=1000; a++） { documend.write('")]),s("h2",[t._v("我爱你")]),t._v("');   }"),s("p")]),t._v(" "),s("li",[s("p",[t._v("break        跳出整个循环（结束循环）开始执行后面的代码；")])]),t._v(" "),s("li",[s("p",[t._v("continue   跳出本次循环，继续下一循环，")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("三种循环的区别")])]),t._v(" "),s("p",[t._v("相同点：都是循环")]),t._v(" "),s("p",[t._v("不同点：")]),t._v(" "),s("p",[t._v("​\tdo-while：不论条件是否成立，循环都必须执行一次，")]),t._v(" "),s("p",[t._v("​\twhile（true） ：当循环次数不确定时，先用while循环更加简单一些")]),t._v(" "),s("p",[t._v("​\tfor ：当循环次数确定时，一般选择使用for循环")])]),t._v(" "),s("li",[s("p",[t._v("死循环")]),t._v(" "),s("p",[t._v("在程序中要避免死循环")]),t._v(" "),s("p",[t._v("while（1==1）{ console.log（'我爱你'）； }（死循环）")])])]),t._v(" "),s("h3",{attrs:{id:"_10数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10数组"}},[t._v("#")]),t._v(" 10数组")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("数组的创建")]),t._v(" "),s("p",[t._v("方式1.通过构造函数")]),t._v(" "),s("p",[t._v("​       var   变量名  =  new    Awway（数据，数据，数据，数据）；")]),t._v(" "),s("p",[t._v("方式2  数组字面量【推荐使用】")]),t._v(" "),s("p",[t._v("​       var  变量名  =  [数据，数据，数据，数据]、")])]),t._v(" "),s("li",[s("p",[t._v("读取和设置数组的元素")]),t._v(" "),s("p",[t._v("访问数组中的元素")]),t._v(" "),s("p",[t._v("​\t语法："),s("strong",[t._v("数组名[下标]")]),t._v("；下表也叫索引  （可以通过在检查的控制台中显示数组，然后查看需要访问的数组元素的前面的序号，既是下标）")]),t._v(" "),s("p",[t._v("设置（修改）数组中的元素")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("数组名[下标]=值")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E5%80%BC.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("数组的lenght属性")]),t._v(" "),s("p",[t._v("通过length属性获取数组中元素的个数")]),t._v(" "),s("p",[t._v("​\t语法："),s("strong",[t._v("数组名.length")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E6%95%B0%E7%BB%84length%E5%B1%9E%E6%80%A7.png",alt:""}})]),t._v(" "),s("p",[t._v("通过length设定数组的长度")]),t._v(" "),s("p",[t._v("​\t语法：数组名.length = 数字")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E6%95%B0%E7%BB%84%E5%A2%9E%E5%8A%A0%E9%95%BF%E5%BA%A6.png",alt:""}})])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("向数组最后追加新的元素")])]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("语法：数组名[数组名.length] = 数据；")])])]),t._v(" "),s("li",[s("p",[t._v("数组中可以存放任何的数据类型，但实际开发过程中，我们一般同一个数组中存放同一种类型的数据。")])]),t._v(" "),s("li",[s("p",[t._v("遍历数组中的所有数据")]),t._v(" "),s("p",[t._v("for （var   a   =  0 ；a<数组名.length；a++）{")]),t._v(" "),s("p",[t._v("​\tdocumend.write(' ")]),s("h2",[t._v("'+数组名[a]+'")]),t._v("')"),s("p"),t._v(" "),s("p",[t._v("}")])])]),t._v(" "),s("h3",{attrs:{id:"_11函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11函数"}},[t._v("#")]),t._v(" 11函数")]),t._v(" "),s("p",[t._v("函数：函数是js的基本组件之一，他是一组执行任务或者计算数据的语句")]),t._v(" "),s("ol",[s("li",[s("h5",{attrs:{id:"函数的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数的创建"}},[t._v("#")]),t._v(" 函数的创建")]),t._v(" "),s("ol",[s("li",[t._v("function  函数名  ()  {")])]),t._v(" "),s("p",[t._v("​\t")]),t._v(" "),s("p",[t._v("​\t}")]),t._v(" "),s("p",[t._v("​\t")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("调用：")])]),t._v(" "),s("p",[t._v("​\t\t函数名（）；")]),t._v(" "),s("p",[t._v("​\t")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"函数的参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数的参数"}},[t._v("#")]),t._v(" 函数的参数")]),t._v(" "),s("p",[t._v("​\t形参：设置函数是函数名后面的（）里的值就是形参")]),t._v(" "),s("p",[t._v("​\t实参：调用函数时函数名后面的（）里面的就是实参")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"函数的返回值-return"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数的返回值-return"}},[t._v("#")]),t._v(" 函数的返回值 return")]),t._v(" "),s("p",[t._v("​\t关键字的return的作用")]),t._v(" "),s("p",[t._v("​\t\t终止函数的执行")]),t._v(" "),s("p",[t._v("​\t\t可以将数据返回给调用者，调用者可以用变量接收函数的返回结果")]),t._v(" "),s("p",[t._v("语法")]),t._v(" "),s("p",[t._v("​\treturn 关键字  要在函数体内使用，")]),t._v(" "),s("p",[t._v("​\tfunction 函数名 （形参，形参，形参.....）{")]),t._v(" "),s("p",[t._v("​\t\t")]),t._v(" "),s("p",[t._v("​\t\t")]),t._v(" "),s("p",[t._v("​\t\t")]),t._v(" "),s("p",[t._v("}")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"函数作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域"}},[t._v("#")]),t._v(" 函数作用域")]),t._v(" "),s("p",[t._v("全局作用域：函数之外的执行环境，")]),t._v(" "),s("p",[t._v("全局变量：在全局作用域中用var关键字创建的变量；在程序的任何地方都可以访问。")]),t._v(" "),s("p",[t._v("局部作用域：在函数体内的执行环境。")]),t._v(" "),s("p",[t._v("局部变量：函数定义的形参，以及函数体中用var关键字定义的变量。")]),t._v(" "),s("p",[t._v("作用域链：当访问一个变量时，会先从本作用域中去找这个变量，若找不到怎会向上级作用域中去找，以此类推，就形成了一个作用域链")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//全局中的特殊情况")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在此a是未使用var关键字声明的变量；")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当代码执行到当前位置时a会变成全局变量；")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//但是要是后面不去调用这个函数的话这个函数体内的内容就不会执行，也就不会将其变成全局的变量了 ")]),t._v("\n    a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("；\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[s("h5",{attrs:{id:"预解析-这是js语言中的一个超级大败笔"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预解析-这是js语言中的一个超级大败笔"}},[t._v("#")]),t._v(" 预解析（这是js语言中的一个超级大败笔）")]),t._v(" "),s("p",[t._v("定义：在程序执行之前有个预备过程，预备过程要做的事儿就是预解析；预备过程要做两件事，分别是")]),t._v(" "),s("p",[t._v("①把用var关键字所声明的变量名（仅仅是变量名），提升到当前执行环境（作用域）的顶部。")]),t._v(" "),s("p",[t._v("②把函数声明所创造的函数（函数整体），提升到当前执行环境（作用域）的顶部")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"匿名函数和自调用函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数和自调用函数"}},[t._v("#")]),t._v(" 匿名函数和自调用函数")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("匿名函数就是"),s("strong",[t._v("没有命名的函数")]),t._v("在js中匿名函数要"),s("strong",[t._v("配合运算符")]),t._v("使用  ")])]),t._v(" "),s("li",[s("p",[t._v("匿名函数常用的表现方式（function （）{ "),t._v("    }）"),s("strong",[t._v("匿名函数添加运算符的作用是防止报错的")]),t._v("!()")])]),t._v(" "),s("li",[s("p",[t._v("自调用函数：自执行函数就是匿名函数创建后马上调用执行。")]),t._v(" "),s("p",[s("strong",[t._v("让匿名函数和运算符配合使用,目的是为了语法不报错")])])]),t._v(" "),s("li",[s("p",[t._v("匿名函数作用")]),t._v(" "),s("p",[t._v("①模拟块级作用域；")]),t._v(" "),s("p",[t._v("②可以避免全局变量的污染（全局变量名冲突）")]),t._v(" "),s("p",[t._v("​\t本质否是利用了局部作用域的作用")])])])]),t._v(" "),s("li",[s("h5",{attrs:{id:"函数体内的arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数体内的arguments"}},[t._v("#")]),t._v(" 函数体内的arguments")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("arguments，函数内部提供一个伪数组。arguments中存放了所有的实参")])]),t._v(" "),s("li",[s("p",[t._v("arguments作用  --")]),t._v(" "),s("p",[t._v("function 函数名（）{")]),t._v(" "),s("p",[t._v("​\targuments.length  参数的个数；")]),t._v(" "),s("p",[t._v("​\targuments[索引]    或去某一个参数；")]),t._v(" "),s("p",[t._v("}")])])]),t._v(" "),s("p",[s("strong",[t._v("由于有时候，不知道用户需要输入几个数据，所以形参不能设置死了，所有形参干脆就不要设置了，直接一个括号就行，然后用户可以随意输入任何数量的实参，函数内部放一个arguments来收集这些实参在函数内部形成一个伪数组，来计算和应用，这个伪数组可以像数组一样进行运算")])])])]),t._v(" "),s("h3",{attrs:{id:"_12-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-对象"}},[t._v("#")]),t._v(" 12.对象")]),t._v(" "),s("h4",{attrs:{id:"_1-创建一个对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建一个对象"}},[t._v("#")]),t._v(" 1.创建一个对象")]),t._v(" "),s("p",[t._v("【方式①】通过new关键字调用系统提供的Object结构构造函数")]),t._v(" "),s("p",[t._v("var 变量名 = new Object （）；")]),t._v(" "),s("p",[t._v("var 变量名 =  {}")]),t._v(" "),s("p",[t._v("【方式②】通过创建并调用自"),s("strong",[t._v("定义构造函数")])]),t._v(" "),s("p",[t._v("function  函数名  （参数1，参数2，参数3，...） {\n")]),t._v(" "),s("p",[t._v("​\t")]),t._v(" "),s("p",[t._v("​\tthis.键 = 参数1；")]),t._v(" "),s("p",[t._v("​\tthis.键 = 参数2；")]),t._v(" "),s("p",[t._v("​\tthis.键 = 参数3；")]),t._v(" "),s("p",[t._v("​\t...")]),t._v(" "),s("p",[t._v("}")]),t._v(" "),s("p",[t._v("eg：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E6%9E%84%E5%BB%BA%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.png",alt:""}})]),t._v(" "),s("p",[t._v("var  对象名  =  new 函数名(实参，实参，实参...)；")]),t._v(" "),s("h4",{attrs:{id:"_2-对象的操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象的操作"}},[t._v("#")]),t._v(" 2. 对象的操作")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对象组织数据的方式：")]),t._v(" "),s("p",[t._v("键值对")]),t._v(" "),s("p",[t._v("​\t\t键，指的是属性名或者方法名")]),t._v(" "),s("p",[t._v("​\t\t值，值得是实际的数据")])]),t._v(" "),s("li",[s("p",[t._v("设置属性的方法：")]),t._v(" "),s("p",[t._v("对象名.键名 = 值；")]),t._v(" "),s("p",[t._v("对象名.['键名']")])]),t._v(" "),s("li",[s("p",[t._v("获取属性和调用方法")]),t._v(" "),s("p",[t._v("对象名.键名;")]),t._v(" "),s("p",[t._v("对象【‘键名’】")])]),t._v(" "),s("li",[s("p",[t._v("删除属性和方法")]),t._v(" "),s("p",[t._v("delete对象.键名；")]),t._v(" "),s("p",[t._v("delete对象['键名']；")])]),t._v(" "),s("li",[s("p",[t._v("==检测属性或方法==")]),t._v(" "),s("p",[t._v("==对象.hasOwnProperty('键名')==；")]),t._v(" "),s("p",[t._v("eg：var r = 对象名.hasOwnProperty('键名')")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  console.log（r）\n")])])]),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E6%A3%80%E6%B5%8B%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%80%BC.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("遍历对象的成员")])]),t._v(" "),s("li",[s("p",[t._v("遍历方式for-in")]),t._v(" "),s("p",[t._v("for（var key in 对象） {")]),t._v(" "),s("p",[t._v("​\t对象[key]")]),t._v(" "),s("p",[t._v("​           ")]),t._v(" "),s("p",[t._v("}")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("==检测对象的类型==")]),t._v(" "),s("p",[t._v("对象是引用数据类型，检测对象时不要用typeof去检测，要用instanceof")]),t._v(" "),s("p",[t._v("对象 ==instancsof==构造函数名；")]),t._v(" "),s("p",[t._v("eg：console.log（对象名    instanceof   构造函数名）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E6%A3%80%E6%B5%8B%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E6%9F%90%E4%B8%AA%E6%9E%84%E5%BB%BA%E5%87%BD%E6%95%B0.png",alt:""}})]),t._v(" "),s("p",[t._v("​")])])]),t._v(" "),s("h4",{attrs:{id:"_3-基本数据类型和引用数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-基本数据类型和引用数据类型"}},[t._v("#")]),t._v(" 3.基本数据类型和引用数据类型")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("基本数据类型："),s("strong",[t._v("简单的数据类型")]),t._v("也叫值类型，有数字Number，字符串String，布尔值Boolean，未定义Undefind，空Null")]),t._v(" "),s("p",[t._v("引用数据类型："),s("strong",[t._v("复杂的数据类型")]),t._v("也叫引用类型，有数组 ==Array==，函数==Functiom==，对象，等等。")])]),t._v(" "),s("li",[s("p",[t._v("内存中的栈和堆")]),t._v(" "),s("p",[t._v("栈区存放    "),s("strong",[t._v("基本数据类型")]),t._v("    和    "),s("strong",[t._v("引用数据类型的地址")])]),t._v(" "),s("p",[t._v("堆区存放          "),s("strong",[t._v("引用类型数据的数据")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("new关键字的执行过程")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("new关键字先向内存空间中申请一片区域存放将要创建的对象")])]),t._v(" "),s("li",[s("p",[t._v("在构建函数内部，this关键字会指向当前申请的内存空间")])]),t._v(" "),s("li",[s("p",[t._v("然后构建函数会 通过this向内存空间中存放属性和方法")])]),t._v(" "),s("li",[s("p",[t._v("最后将创建好的对象（已经拥有属性和方法）返回给外部的变量名")])]),t._v(" "),s("li")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("基本数据类型在复制时（一个变量名赋值给另一变量名），会在栈区申请一块空间安存放一个新的数据，并且变量名会指向新的数据")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E5%A4%8D%E5%88%B6%E8%B5%8B%E5%80%BC%E7%9A%84%E8%BF%87%E7%A8%8B.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("​\t引用类型数据在复制时（一个变量名赋值给另一个新的变量名），会在栈去申请一块的空间存放堆区中的引用类型数据的地址，并且新的变量名会指向栈区中存放地址的空间")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E4%BC%A0%E5%8F%82%E6%97%B6%E7%9A%84%E7%BB%8F%E8%BF%87.png",alt:""}})])])]),t._v(" "),s("h3",{attrs:{id:"_13内置对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13内置对象"}},[t._v("#")]),t._v(" 13内置对象")]),t._v(" "),s("h4",{attrs:{id:"_1-math常用的属性和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-math常用的属性和方法"}},[t._v("#")]),t._v(" 1.Math常用的属性和方法")]),t._v(" "),s("ol",[s("li")]),t._v(" "),s("ul",[s("li",[t._v("Math.abs(数字);\t获取一个数字的绝对值")]),t._v(" "),s("li",[t._v("Math.round(数字);   四舍五入")]),t._v(" "),s("li",[t._v("Math.PI;    π")]),t._v(" "),s("li",[t._v("Math.ceil(数字);    向上取整")]),t._v(" "),s("li",[t._v("Math.floor(数字);  向下取整")]),t._v(" "),s("li",[t._v("Math.random();    随机数[0,1);")]),t._v(" "),s("li",[t._v("Math.max(数字,数字,数字...);    求最大数")]),t._v(" "),s("li",[t._v("Math.min(数字,数字,数字...);     求最小数")]),t._v(" "),s("li",[t._v("4")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//得到一个两数之间的随机整数，包括两个数在内")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRandom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//含最大值，含最小值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-date对象常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-date对象常用方法"}},[t._v("#")]),t._v(" 2.Date对象常用方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Date对象的创建")]),t._v(" "),s("p",[t._v("1.var 变量名 = new Date（）；创建的是当前的时间对象")]),t._v(" "),s("p",[t._v("2.var 变量名 = new Date（时间）；创建的是指定的时间对象")]),t._v(" "),s("p",[t._v("​       ")]),t._v(" "),s("p",[t._v("3.var 变量名 = new Date （value）；")])]),t._v(" "),s("li",[s("p",[t._v("常用的Date类型对象方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("获取和设置时间   ")]),t._v(" "),s("p",[t._v("日期对象.getFullYear()  ------ 日期对象.setFullYear(数字)")]),t._v(" "),s("p",[t._v("日期对象.getMonth()  ------ 日期对象.setMonth(数字)")]),t._v(" "),s("p",[t._v("日期对象.getDate()  ------ 日期对象.setDate(数字)")]),t._v(" "),s("p",[t._v("hour 小时  minute分钟  seconds秒 millisecongs毫秒  语法相同")])]),t._v(" "),s("li",[s("p",[t._v("获取星期数")])])]),t._v(" "),s("p",[t._v("日期对象.getDay   ")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("获取1970年至指定时间的总毫秒数")]),t._v(" "),s("p",[t._v("日期对象.getTime()  ------日期对象.setTime（数字）；")])])]),t._v(" "),s("p",[t._v("封装一个函数实现日期格式化  eg：2019年4月5日 12点 12分12秒")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E5%B0%81%E8%A3%85%E4%B8%AA%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96.png",alt:""}})]),t._v(" "),s("p",[t._v("算倒计时")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E6%97%B6%E5%B7%AE%E9%81%93%E6%B5%8E%E6%98%AF%E8%AE%A1%E7%AE%97.png",alt:""}})])])]),t._v(" "),s("h4",{attrs:{id:"_3-array类型对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-array类型对象"}},[t._v("#")]),t._v(" 3.Array类型对象")]),t._v(" "),s("p",[t._v("​    数组对象的常用的方法")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("从数组前后删除或添加")])]),t._v(" "),s("p",[t._v("​\t数组名.unshift( ’数据‘，’数据‘，’数据‘...)  -----数字名.shift()  ")]),t._v(" "),s("p",[t._v("​\t数组名.push( ’数据‘，’数据‘，’数据‘...)  -----数组名.pop()")]),t._v(" "),s("p",[t._v("​\t==返回的是添加了新数据后该数组的长度（length）==")]),t._v(" "),s("p",[t._v("​\t  "),s("strong",[t._v("从数组任意位置添加或删除")])]),t._v(" "),s("p",[t._v("​\t数组名.splice（index，howmany，item1，item2，.....itemn）；")]),t._v(" "),s("p",[t._v("​\t")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("查询元素在数组的位置")])]),t._v(" "),s("p",[t._v("​\t数组名.indexOf('数据')；")]),t._v(" "),s("p",[t._v("​\t如果数组中没有该数据则返回的数是  -1；")]),t._v(" "),s("p",[t._v("​\t数组名.lastIndexOf('数据')；")]),t._v(" "),s("p",[t._v("​\t表示数组中的重复元素最后一个的位置；")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("数组所有元素的翻转和排序")])]),t._v(" "),s("p",[t._v("​\t翻转")]),t._v(" "),s("p",[t._v("​\t数组名.reverse();")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("排序")])]),t._v(" "),s("p",[t._v("​\t默认是；数组名.sort();")]),t._v(" "),s("p",[t._v("​\t")]),t._v(" "),s("p",[t._v("​\t数组名.sort（ function （a，b） { return  a-b} ）")]),t._v(" "),s("p",[t._v("​\t数组名.sort（ function （a，b） { return  a-b} ）")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("数组的截取")])]),t._v(" "),s("p",[t._v("​\t数组名.slice（start，end）")]),t._v(" "),s("p",[t._v("​\t截取的数组包含start 不包含end")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("数组元素的拼接")])]),t._v(" "),s("p",[t._v("​\t数组名.join('');")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("数组其他方法扩展")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组遍历（current  意思是当前的）")]),t._v("\n数组名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("currentArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过滤出符合筛选条件的元素，返回一个新的数组")]),t._v("\n数组名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("currentArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 条件"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如：return value >= 1000;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 验证数组中的每一个元素是否都符合指定的条件,返回布尔值")]),t._v("\n数组名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("every")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("currentArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 条件"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如：return value >= 1000;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 验证数组中的元素，是否有符合指定条件的，返回布尔值")]),t._v("\n数组名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("some")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("currentArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 条件"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如：return value >= 1000;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历数组中的每一个元素，更改后存入一个新的数组中，返回一个新的数组")]),t._v("\n数组名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("currentArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 操作"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如：return value * 2;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"_5-字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-字符串"}},[t._v("#")]),t._v(" 5. 字符串")]),t._v(" "),s("p",[t._v("=="),s("strong",[t._v("为什么基本数据类型字符串，可以像对象一样使用？")]),t._v("==")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通字符串不是对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但是为什么可以像对象一样使用点出东西？")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把字符串包装成对象 → 基本包装类型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" strObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把字符串包装成对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为是对象，所以可以点出东西。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n")])])]),s("p",[t._v("​\t获取字符串中的单个字符")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("charAt（index）；\n\n​\t\t字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("；\n")])])]),s("p",[t._v("​\t字符串的拼接和获取")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//\x3c!--拼接--\x3e")]),t._v("\n\n​\t\t字符串 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ‘ ’；\n\n​\t\t字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concat（str1，str2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("）；\n\n​\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//\x3c!--获取--\x3e")]),t._v("\n\n​\t\t字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slice（start，end）；\n")])])]),s("p",[t._v("​\t查询字符是否存在与字符串中")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indexOf（‘  ’）；\n\n​\t\t字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndexOf（‘  ’）；\n")])])]),s("p",[t._v("​\t去除字符串中的空白字符")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trim（）；"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//\x3c!--去除字符串两边的空白字符--\x3e\t\t")]),t._v("\n\n\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("字母字符的大小写转换\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUnperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换成大写")]),t._v("\n字符串"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换成小写")]),t._v("\n\n")])])]),s("p",[t._v("​\t字符串的替换")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("字符串.replace(ald , new);\n")])])]),s("p",[t._v("​\t字符串的分割    ")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("字符串.split('一般写字符中间拼接的数据即可');"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--如下例 --\x3e")]),t._v("\n")])])]),s("p",[t._v("eg :"),s("img",{attrs:{src:"https://renquanxi.github.io/iamgeWarehouse/img/%E5%AD%97%E7%AC%A6%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2.png",alt:""}})])])}),[],!1,null,null,null);a.default=v.exports}}]);