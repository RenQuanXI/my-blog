(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{473:function(t,r,e){"use strict";e.r(r);var n=e(12),a=Object(n.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"第五部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第五部分"}},[t._v("#")]),t._v(" 第五部分")]),t._v(" "),e("p",[t._v("我们已经涵盖了上一系列的许多话题;从基础对象操作到动画，事件，滤镜，组合和子类。但还有几件非常有趣和有用的事情要讨论！")]),t._v(" "),e("h2",{attrs:{id:"缩放和平移-zoom-and-panning"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缩放和平移-zoom-and-panning"}},[t._v("#")]),t._v(" 缩放和平移（Zoom and panning）")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("让我们看看如何通过鼠标交互实现缩放和平移的基本系统。我们将使用鼠标滚轮在画布上放大20倍（2000％）并使用alt +单击动作进行拖动。\n我们开始基本控制：\n"),e("a",{attrs:{href:"http://fabricjs.com/fabric-intro-part-5#step1",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看demo"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[t._v("这是一个基本的缩放控制，限制在1%到2000%之间。我们现在要添加画布的拖动。我们将使用ALT +拖动，但您可以更改为另一种组合。按住alt键下拉鼠标会将布尔值设为true，这样鼠标移动事件就能知道是开始拖拽了：\n"),e("a",{attrs:{href:"http://fabricjs.com/fabric-intro-part-5#step2",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看demo"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[t._v("好的，这是一个基本设置，可以让你控制缩放和平移。仍然有一些可能的增强。 例如，我们可以使轮缩放使画布围绕光标所在的点居中：\n"),e("a",{attrs:{href:"http://fabricjs.com/fabric-intro-part-5#step3",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看demo"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[t._v("最后一点，我们可以限制平移区域以避免在一个方向上无限延伸。我们描出一个1000×1000像素的矩形来表示平移区域。我们添加代码来限制边界内的移动：\n"),e("a",{attrs:{href:"http://fabricjs.com/fabric-intro-part-5#step4",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看demo"),e("OutboundLink")],1)])])])])}),[],!1,null,null,null);r.default=a.exports}}]);